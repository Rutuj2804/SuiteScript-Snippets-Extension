{
    "SuiteScript Service Template": {
        "prefix": "service.ss",
        "body": [
            "/**",
            "* @NApiVersion 2.x",
            "* @NModuleScope Public",
            "*/",
            "define([",
            "    '../../CommonLibraries/SuiteScript2/CommonLibraries.Helper.js'",
            "], function (",
            "    CLHelper",
            ") {",
            "",
            "    'use strict';",
            "",
            "    function service(ctx) {",
            "        try {",
            "            log.debug('REQUEST', JSON.stringify(ctx.request));",
            "",
            "            var reqBody = JSON.parse(ctx.request.body);",
            "            log.error('reqBody', reqBody);",
            "",
            "            // You can call a custom module's method(s) here",
            "            // Use CLHelper which is referred in define to get the path of the",
            "            // custom module",
            "",
            "            ctx.response.write(JSON.stringify({",
            "                data: true,",
            "                hasError: false,",
            "                message: 'Success'",
            "            }));",
            "        } catch (e) {",
            "            log.error('Exception: service', e.toString());",
            "",
            "            ctx.response.write(JSON.stringify({",
            "                data: null,",
            "                hasError: true,",
            "                message: e.message",
            "            }));",
            "        }",
            "    }",
            "",
            "    return {",
            "        service: service",
            "    };",
            "});"
        ]
    },

    "Try Catch Block SuiteScript": {
        "prefix": "try.catch",
        "body": [
            "try {",
            "   ${4}",
            "} catch (${1:error}) {",
            "   log.${2:error}('Error', ${3:'Error'})",
            "}"
        ]
    },

    "For loop SuiteScript": {
        "prefix": "for.loop",
        "body": [
            "for (let index = 0; index < array.length; index++) {",
            "    // logic",
            "}"
        ]
    },

    "Log Error Statements SuiteScript": {
        "prefix": "log.error",
        "body": [
            "log.${1:error}('${2:Error}', '${3:Something went wrong}')"
        ]
    },

    "Log Debug Statements SuiteScript": {
        "prefix": "log.debug",
        "body": [
            "log.${1:debug}('${2:Error}', '${3:Something went wrong}')"
        ]
    },

    "Log Audit Statements SuiteScript": {
        "prefix": "log.audit",
        "body": [
            "log.${1:audit}('${2:Error}', '${3:Something went wrong}')"
        ]
    },

    "Log Emergency Statements SuiteScript": {
        "prefix": "log.emergency",
        "body": [
            "log.${1:emergency}('${2:Error}', '${3:Something went wrong}')"
        ]
    },
    "SuiteScript SS2 Model": {
        "prefix": "ss2.model.view",
        "body": [
            "define('${1:SampleModel}.SS2Model',[",
            "    'SCModel',",
            "    'Utils'",
            "], function (",
            "    SCModelModule,",
            "    Utils",
            ") {",
            "    'use strict';",
            "",
            "    var SCModel = SCModelModule.SCModel;",
            "",
            "    function ${2:SampleModelSS2Model} () {",
            "        SCModel.call(this);",
            "",
            "        this.urlRoot = function urlRoot() {",
            "            return Utils.getAbsoluteUrl(",
            "                getExtensionAssetsPath(",
            "                    ${3:'Modules/SampleService.Service.ss'}",
            "                ), true",
            "            );",
            "        }",
            "    }",
            "",
            "    ${2:SampleModelSS2Model}.prototype = Object.create(SCModel.prototype);",
            "    ${2:SampleModelSS2Model}.prototype.constructor = ${2:SampleModelSS2Model};",
            "",
            "    return ${2:SampleModelSS2Model};",
            "});"
        ]
    },
    "SuiteScript View": {
        "prefix": "scview.view",
        "body": [
            "define('${1:SampleView}.View', [",
            "\t'sampleview.tpl',",
            "",
            "\t'SCView'",
            "], function (",
            "\tsampleview_tpl,",
            "",
            "\tSCViewModule",
            ") {",
            "    'use strict';",
            "",
            "    var SCView = SCViewModule.SCView;",
            "",
            "    function ${2:SampleViewView}(options) {",
            "\t\tSCView.call(this, options);",
            "\t\tjQuery(window).scrollTop(0);",
            "\t\tvar self = this;",
            "",
            "        this.template = sampleview_tpl;",
            "",
            "\t\t// You can access the container object like this:",
            "        // It has to be passed on to this view when it is created",
            "        // or by the parent view (if any)",
            "        this.container = options.container;",
            "",
            "        // You can access components of the extensibility API using the container obj",
            "        this.environment_component = this.container.getComponent('Environment');",
            "",
            "        // Declare child events (if any):",
            "        /* this.childViews = {",
            "            'ChildView.One': function() {",
            "                return new ChildViewOne({",
            "                    someVar: true",
            "                });",
            "            }",
            "        } */",
            "    }",
            "",
            "    ${2:SampleViewView}.prototype = Object.create(SCView.prototype);",
            "    ${2:SampleViewView}.prototype.constructor = ${2:SampleViewView};",
            "",
            "    ${2:SampleViewView}.prototype.getEvents = function () {",
            "        // Declare events (if any):",
            "        return {",
            "            // 'click [data-action='m360-slxc-sample-event-action']': 'callMethod'",
            "        };",
            "    }",
            "",
            "    ${2:SampleViewView}.prototype.getContext = function () {",
            "        return {",
            "            message: 'Sample View Template'",
            "        }",
            "    }",
            "",
            "    return ${2:SampleViewView};",
            "});"
        ]
    },
    "SuiteScript Handlebars Helper": {
        "prefix": "handlebar.helper.view",
        "body": [
            "define('${1:CoreFunctionality}.HandlebarsHelpers', [",
            "    'Utils',",
            "    'Handlebars'",
            "], function (",
            "    Utils,",
            "    Handlebars",
            "){",
            "    'use strict';",
            "",
            "    function registerCustomHandlebarsHelpers() {",
            "        try {",
            "            Handlebars.registerHelper('m360FormatCurrency', function (amount) {",
            "                return Utils.formatCurrency(amount);",
            "            });",
            "            // A handlebars helper 'formatCurrency' already exists",
            "            // Use that one instead of this one",
            "            // This template can be used to create more custom handlebars helpers if required",
            "",
            "            Handlebars.registerHelper('m360IfIsFloat', function(val, options) {",
            "                var fnTrue = options.fn, fnFalse = options.inverse;",
            "            ",
            "                return isNaN(parseFloat(val))?fnFalse(this):fnTrue(this);",
            "            });",
            "",
            "            Handlebars.registerHelper('m360IfIsInteger', function(val, options) {",
            "                var fnTrue = options.fn, fnFalse = options.inverse;",
            "            ",
            "                return isNaN(parseInt(val))?fnFalse(this):fnTrue(this);",
            "            });",
            "",
            "            return true;",
            "        } catch (e) {",
            "            console.error('Error: CoreFunctionality.HandlebarsHelpers.js registerCustomHandlebarsHelpers', e.toString());",
            "            return false;",
            "        }",
            "    }",
            "",
            "    return {",
            "        registerCustomHandlebarsHelpers: registerCustomHandlebarsHelpers",
            "    }",
            "});"
        ]
    },
    "SuiteScript PageType View": {
        "prefix": "pagetype.view",
        "body": [
            "define('${1:Core.PageType}.View',\t[",
            "\t'${3:template}.tpl'",
            "\t",
            "\t'SCView'",
            "], function (",
            "\t${3:template}_tpl,",
            "",
            "\tSCViewModule",
            ") {",
            "    'use strict';",
            "",
            "    var SCView = SCViewModule.SCView;",
            "",
            "\tfunction ${2:SampleViewView}(options) {",
            "\t\tSCView.call(this, options);",
            "\t\tjQuery(window).scrollTop(0);",
            "\t\tvar self = this;",
            "",
            "\t\tthis.template = ${3:template}_tpl;",
            "",
            "\t\t// You can access the container object like this:",
            "\t\t// It has to be passed on to this view when it is created",
            "\t\t// or by the parent view (if any)",
            "\t\tthis.container = options.container;",
            "",
            "\t\t// You can access components of the extensibility API using the container obj",
            "\t\tthis.environment_component = this.container.getComponent('Environment');",
            "",
            "\t\t// Declare child events (if any):",
            "\t\t/* this.childViews = {",
            "\t\t\t'ChildView.One': function() {",
            "\t\t\t\treturn new ChildViewOne({",
            "\t\t\t\t\tsomeVar: true",
            "\t\t\t\t});",
            "\t\t\t}",
            "\t\t} */",
            "    }",
            "",
            "    ${2:SampleViewView}.prototype = Object.create(SCView.prototype);",
            "    ${2:SampleViewView}.prototype.constructor = ${2:SampleViewView};",
            "",
            "    ${2:SampleViewView}.prototype.getEvents = function () {",
            "        // Declare events (if any):",
            "        return {",
            "            // 'click [data-action='m360-slxc-sample-event-action']': 'callMethod'",
            "        };",
            "    }",
            "",
            "    ${2:SampleViewView}.prototype.getContext = function () {",
            "        return {",
            "            message: 'Sample View Template'",
            "        }",
            "    }",
            "",
            "    return ${2:SampleViewView};",
            "});"
        ]
    },
    "SuiteScript Singleton": {
        "prefix": "singleton.view",
        "body": [
            "define('${1:CoreFunctionality}.Singleton', function() {",
            "",
            "\t'use strict';",
            "\t",
            "\tvar ${2:Singleton} = {",
            "\t\tgetInstance: function () {",
            "\t\t\tvar This = this;",
            "\t\t\t\tthis.instance = this.instance || new This();",
            "\t\t\treturn this.instance;",
            "\t\t}",
            "\t};",
            "\t",
            "\treturn ${2:Singleton};",
            "});"
        ]
    },

    "Create And Run Search N/Search": {
        "prefix": "search.create",
        "body": [
            "search.create({",
            "    type: '${1:custom_search}',",
            "    filters: [${2}],",
            "    columns: [${3}]",
            "}).run().each(function (result) {",
            "    log.debug(result)",
            "",
            "    return true",
            "})"
        ]
    },
    "Load Run Search N/Search": {
        "prefix": "search.load",
        "body": [
            "var ${1:mySearch} = search.load({",
            "    id: '${2:custom_search_id}'",
            "})",
            "",
            "${1:mySearch}.run().each(function (result) {",
            "    log.debug(result.getValue({ name: '${3:entity}' }))",
            "",
            "    return true",
            "})"
        ]
    },
    "Paged Search N/Search": {
        "prefix": "search.load.paged",
        "body": [
            "var ${1:mySearch} = search.load({",
            "    id: '${2:custom_search_id}'",
            "});",
            "",
            "var ${3:myPagedData} = ${1:mySearch}.runPaged();",
            "",
            "${3:myPagedData}.pageRanges.forEach(function(pageRange){",
            "    var myPage = ${3:myPagedData}.fetch({",
            "        index: pageRange.index",
            "    });",
            "",
            "    myPage.data.forEach(function (result) {",
            "        log.debug(${4:result})",
            "    });",
            "});"
        ]
    },
    "Delete Search N/Search": {
        "prefix": "search.delete",
        "body": ["search.delete({", "    id: '${1:custom_id}'", "})"]
    },

    "Create Record N/Record": {
        "prefix": "record.create",
        "body": [
            "var ${1:myRecord} = record.create({",
            "    type: ${2},",
            "    isDynamic: ${3:true}",
            "})",
            "",
            "${1:myRecord}.setValue({",
            "    fieldId: ${4:'entity_field'},",
            "    value: ${5:'entity_value'}",
            "})",
            "",
            "${1:myRecord}.save({",
            "    enableSourcing: ${6:false},",
            "    ignoreMandatoryFields: ${7:false}",
            "})"
        ]
    },
    "Create Record Promise N/Record": {
        "prefix": "record.create.promise",
        "body": [
            "var ${1:myRecord} = record.create.promise({",
            "    type: ${2},",
            "    isDynamic: ${3:true}",
            "})",
            "",
            "${1:myRecord}.then(objRecord=> {",
            "    objRecord.setValue({",
            "        fieldId: ${4:'entity_field'},",
            "        value: ${5:'entity_value'}",
            "    })",
            "})",
            "",
            "${1:myRecord}.save({",
            "    enableSourcing: ${6:false},",
            "    ignoreMandatoryFields: ${7:false}",
            "})"
        ]
    },
    "Load Record N/Record": {
        "prefix": "record.load",
        "body": [
            "var ${1:newFeatureRecord} = record.load({",
            "    type: '${2:customrecord_feature}',",
            "    id: 1,",
            "    isDynamic: true,",
            "});"
        ]
    },
    "Load Record Promise N/Record": {
        "prefix": "record.load.promise",
        "body": [
            "var ${1:loadRecordPromise} = record.load.promise({",
            "    type: '${2:record_field}',",
            "    id: ${3:712},",
            "});",
            "",
            "// Note: To load an instance of a custom record type,",
            "// use the record type's string ID. For example:",
            "// type: 'customrecord_feature'",
            "",
            "${1:loadRecordPromise}.then(",
            "    function (objRecord) {",
            "        objRecord.setValue({",
            "            fieldId: 'message',",
            "            value: 'We will start the call with a restrospective.',",
            "        });",
            "",
            "        var recordId = objRecord.save();",
            "",
            "        // Add any other needed logic that shouldn't execute",
            "        // until after the record is instantiated.",
            "",
            "        log.debug({",
            "            title: 'Record updated',",
            "            details: 'Updated record ID: ' + recordId,",
            "        });",
            "    },",
            "    function (e) {",
            "        log.error({",
            "            title: 'Unable to load record',",
            "            details: e.name,",
            "        });",
            "    }",
            ");"
        ]
    },
    "Transform Record N/Record": {
        "prefix": "record.transform",
        "body": [
            "var objRecord = record.transform({",
            "    fromType: '${1:record_entity_1}',",
            "    fromId: ${2:107},",
            "    toType: '${3:record_entity_2}',",
            "    isDynamic: true,",
            "});"
        ]
    },
    "Transform Record Promise N/Record": {
        "prefix": "record.transform.promise",
        "body": [
            "var ${1:transformRecordPromise} = record.transform.promise({",
            "    fromType: '${2:record_entity_1}',",
            "    fromId: ${3:25},",
            "    toType: '${4:record_entity_2}',",
            "    isDynamic: true,",
            "});",
            "",
            "${1:transformRecordPromise}.then(",
            "    function (recordObject) {",
            "        var recordId = recordObject.save();",
            "",
            "        // Add any other needed logic that shouldn't execute until",
            "        // after the record is transformed.",
            "",
            "        log.debug({",
            "            title: 'Record saved',",
            "            details: 'Id of new record: ' + recordId,",
            "        });",
            "    },",
            "    function (e) {",
            "        log.error({",
            "            title: e.name,",
            "            details: e.message,",
            "        });",
            "    }",
            ");"
        ]
    },

    "Create Query N/Query": {
        "prefix": "query.create",
        "body": [
            "// Create a query definition for customer records",
            "let ${1:myQueryOne} = query.create({",
            "    type: 'record_field',",
            "});",
            "",
            "// Join the original query definition based on the salesrep field. In a customer",
            "// record, the salesrep field contains a reference to an employee record. When you",
            "// join based on this field, you are joining the query definition with the employee",
            "// query type, and you can access the fields of the joined employee record in",
            "// your query.",
            "let ${2:myJoinOne} = ${1:myQueryOne}.autoJoin({",
            "    fieldId: '${3:salesrep}',",
            "});",
            "",
            "// Join the joined query definition based on the location field. In an employee",
            "// record, the location field contains a reference to a location record.",
            "let ${4:myJoinTwo} = ${2:myJoinOne}.autoJoin({",
            "    fieldId: '${5:location}',",
            "});",
            "",
            "// Create conditions for the query",
            "let ${6:firstCondition} = ${1:myQueryOne}.createCondition({",
            "    fieldId: '${7:id}',",
            "    operator: query.Operator.${8:EQUAL},",
            "    values: ${9:107},",
            "});",
            "let ${10:secondCondition} = ${1:myQueryOne}.createCondition({",
            "    fieldId: '${11:id}',",
            "    operator: query.Operator.${12:EQUAL},",
            "    values: ${13:2647},",
            "});",
            "let ${14:thirdCondition} = ${2:myJoinOne}.createCondition({",
            "    fieldId: '${15:email}',",
            "    operator: query.Operator.${16:START_WITH_NOT},",
            "    values: '${17:example}',",
            "});",
            "",
            "// Combine conditions using and() and or() operator methods. In this example,",
            "// the combined condition states that the id field of the customer record must",
            "// have a value of either 107 or 2647, and the email field of the employee",
            "// record (the record that is referenced in the salesrep field of the customer",
            "// record) must not start with 'example'.",
            "${1:myQueryOne}.condition = ${1:myQueryOne}.and(",
            "    ${14:thirdCondition},",
            "    ${1:myQueryOne}.or(${6:firstCondition}, ${10:secondCondition})",
            ");",
            "",
            "// Create query columns",
            "${1:myQueryOne}.columns = [",
            "    ${1:myQueryOne}.createColumn({",
            "        fieldId: 'field_id',",
            "    }),",
            "    ${1:myQueryOne}.createColumn({",
            "        fieldId: 'field_id',",
            "    }),",
            "    ${2:myJoinOne}.createColumn({",
            "        fieldId: 'field_id',",
            "    }),",
            "    ${2:myJoinOne}.createColumn({",
            "        fieldId: 'field_id',",
            "    }),",
            "    ${2:myJoinOne}.createColumn({",
            "        fieldId: 'field_id',",
            "    }),",
            "    ${4:myJoinTwo}.createColumn({",
            "        fieldId: 'field_id',",
            "    }),",
            "];",
            "",
            "// Sort the query results based on query columns",
            "${1:myQueryOne}.sort = [",
            "    ${1:myQueryOne}.createSort({",
            "        column: ${1:myQueryOne}.columns[3],",
            "    }),",
            "    ${1:myQueryOne}.createSort({",
            "        column: ${1:myQueryOne}.columns[0],",
            "        ascending: false,",
            "    }),",
            "];",
            "",
            "// Run the query",
            "let resultSet = ${1:myQueryOne}.run();",
            "",
            "// Retrieve and log the results",
            "let results = resultSet.results;",
            "for (let i = results.length - 1; i >= 0; i--) log.debug(results[i].values);",
            "log.debug(resultSet.types);",
            ""
        ]
    },
    "Create Query Paged N/Query": {
        "prefix": "query.create.paged",
        "body": [
            "// Create a query definition for transaction records",
            "let ${1:myQuery} = query.create({",
            "    type: '${2:record_field}',",
            "});",
            "",
            "// Join the original query definition based on the employee field. In a transaction",
            "// record, the employee field contains a reference to an employee record. When you",
            "// join based on this field, you are joining the query definition with the employee",
            "// query type, and you can access the fields of the joined employee record in",
            "// your query.",
            "let ${3:myJoin} = ${1:myQuery}.autoJoin({",
            "    fieldId: '${4:field_id}',",
            "});",
            "",
            "// Create a condition for the transaction query",
            "let ${5:myCondition} = ${1:myQuery}.createCondition({",
            "    fieldId: '${6:field_id}',",
            "    operator: query.Operator.${7:IS},",
            "    values: ${8:true},",
            "});",
            "${1:myQuery}.condition = ${5:myCondition};",
            "",
            "// Create a query column",
            "${1:myQuery}.columns = [",
            "    ${3:myJoin}.createColumn({",
            "        fieldId: '${9:field_id}',",
            "    }),",
            "];",
            "",
            "// Sort the query results based on a query column",
            "${1:myQuery}.sort = [",
            "    ${1:myQuery}.createSort({",
            "        column: ${1:myQuery}.columns[0],",
            "        ascending: ${10:false},",
            "    }),",
            "];",
            "",
            "// Run the query as a paged query with 10 results per page",
            "let results = ${1:myQuery}.runPaged({",
            "    pageSize: 10,",
            "});",
            "",
            "log.debug(results.pageRanges.length);",
            "log.debug(results.count);",
            "",
            "// Retrieve the query results using an iterator",
            "let iterator = results.iterator();",
            "iterator.each(function (result) {",
            "    let page = result.value;",
            "    log.debug(page.pageRange.size);",
            "    return true;",
            "});",
            "",
            "// Alternatively, retrieve the query results by looping through",
            "// each result",
            "for (let i = 0; i < results.pageRanges.length; i++) {",
            "    let page = results.fetch(i);",
            "    log.debug(page.pageRange.size);",
            "}"
        ]
    },
    "Run Query N/Query": {
        "prefix": "query.runSuiteQLPaged",
        "body": [
            "var sql =",
            "    'SELECT ' +",
            "    '${1:scriptDeployment}.${3:primarykey}, ${2:scriptexecutioncontextmap}.${4:executioncontext}' +",
            "    ' FROM ' +",
            "    '${1:scriptDeployment}, ${2:scriptexecutioncontextmap}' +",
            "    ' WHERE ' +",
            "    '${2:scriptexecutioncontextmap}.${5:scriptrecord} = ${1:scriptDeployment}.${3:primarykey}' +",
            "    ' AND ' +",
            "    '${2:scriptexecutioncontextmap}.${4:executioncontext} IN ('${6:WEBSTORE}', '${7:WEBAPPLICATION}')';",
            "",
            "var resultIterator = query",
            "    .runSuiteQLPaged({",
            "        query: sql,",
            "        pageSize: 10,",
            "    })",
            "    .iterator();",
            "",
            "resultIterator.each(function (page) {",
            "    var pageIterator = page.value.data.iterator();",
            "    pageIterator.each(function (row) {",
            "        log.debug(",
            "            'ID: ' +",
            "                row.value.getValue(0) +",
            "                ', Context: ' +",
            "                row.value.getValue(1)",
            "        );",
            "        return true;",
            "    });",
            "    return true;",
            "});"
        ]
    },
    "Delete Query N/Query": {
        "prefix": "query.delete",
        "body": ["query.delete({", "    id: '${1:custworkbook237}',", "});"]
    },
    "Load Query N/Query": {
        "prefix": "query.load",
        "body": [
            "var ${1:myLoadedQuery} = query.load({",
            "    id: '${2:custworkbook237}'",
            "});",
            "",
            "var ${3:myJoin} = ${1:myLoadedQuery}.autoJoin({",
            "    fieldId: '${4:field_id}'",
            "});",
            "",
            "var results = ${1:myLoadedQuery}.run();"
        ]
    },

    "User Event Script SuiteScript": {
        "prefix": "script.user.event",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " *@NScriptType UserEventScript",
            " */",
            "define([",
            "    'N/record'",
            "], function (",
            "    record",
            ") {",
            "",
            "    function beforeLoad(context) {}",
            "",
            "    function beforeSubmit(context) {}",
            "",
            "    function afterSubmit(context) {}",
            "",
            "    return {",
            "        beforeLoad: beforeLoad,",
            "        beforeSubmit: beforeSubmit,",
            "        afterSubmit: afterSubmit,",
            "    };",
            "});"
        ]
    },
    "Bundle Installation Script SuiteScript": {
        "prefix": "script.bundle.installation",
        "body": [
            "/**",
            " * @NApiVersion 2.0",
            " * @NScriptType BundleInstallationScript",
            " */",
            "define([",
            "    'N/runtime'",
            "], function (",
            "    runtime",
            ") {",
            "",
            "    function checkPrerequisites() {",
            "        if (",
            "            !runtime.isFeatureInEffect({",
            "                feature: 'TIMEOFFMANAGEMENT',",
            "            })",
            "        )",
            "            throw (",
            "                'The TIMEOFFMANAGEMENT feature must be enabled. ' +",
            "                'Please enable the feature and try again.'",
            "            );",
            "    }",
            "",
            "    return {",
            "        beforeInstall: function beforeInstall(params) {",
            "            checkPrerequisites();",
            "        },",
            "        beforeUpdate: function beforeUpdate(params) {",
            "            checkPrerequisites();",
            "        },",
            "    };",
            "});"
        ]
    },
    "Client Script SuiteScript": {
        "prefix": "script.client.script",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " *@NScriptType ClientScript",
            " */",
            "define([",
            "    'N/record'",
            "], function (",
            "    record",
            ") {",
            "    ",
            "    function pageInit(context) {",
            "",
            "    }",
            "",
            "    function saveRecord(context) {",
            "",
            "    }",
            "",
            "    function validateField(context) {",
            "",
            "    }",
            "",
            "    function fieldChanged(context) {",
            "",
            "    }",
            "",
            "    function postSourcing(context) {",
            "",
            "    }",
            "",
            "    function lineInit(context) {",
            "",
            "    }",
            "",
            "    function validateDelete(context) {",
            "",
            "    }",
            "",
            "    function validateInsert(context) {",
            "",
            "    }",
            "",
            "    function validateLine(context) {",
            "",
            "    }",
            "",
            "    function sublistChanged(context) {",
            "",
            "    }",
            "",
            "    return {",
            "        pageInit: pageInit,",
            "        fieldChanged: fieldChanged,",
            "        postSourcing: postSourcing,",
            "        sublistChanged: sublistChanged,",
            "        lineInit: lineInit,",
            "        validateField: validateField,",
            "        validateLine: validateLine,",
            "        validateInsert: validateInsert,",
            "        validateDelete: validateDelete,",
            "        saveRecord: saveRecord,",
            "    };",
            "});"
        ]
    },
    "Map Reduce Script SuiteScript": {
        "prefix": "script.map.reduce",
        "body": [
            "/**",
            " * @NApiVersion 2.0",
            " * @NScriptType MapReduceScript",
            " */",
            "",
            "define([",
            "    'N/record'",
            "], function (",
            "    record",
            ") {",
            "",
            "    function getInputData() {",
            "        ${1}",
            "    }",
            "",
            "    function map(context) {",
            "",
            "    }",
            "",
            "    function reduce(context) {",
            "",
            "    }",
            "",
            "    function summarize(context) {",
            "",
            "    }",
            "",
            "    return {",
            "        getInputData: getInputData,",
            "        map: map,",
            "        reduce: reduce,",
            "        summarize: summarize,",
            "    };",
            "});"
        ]
    },
    "Mass Update Script SuiteScript": {
        "prefix": "script.mass.update",
        "body": [
            "/**",
            " *@NApiVersion 2.1",
            " *@NScriptType MassUpdateScript",
            " */",
            "define([",
            "    'N/record'",
            "], (",
            "    record",
            ") => {",
            "",
            "    function each(params) {",
            "        let ${1:myRecord} = record.load({",
            "            type: params.type,",
            "            id: params.id,",
            "        });",
            "        ${1:myRecord}.setValue('field_id', 61);",
            "        ${1:myRecord}.save();",
            "    }",
            "    return {",
            "        each: each,",
            "    };",
            "});"
        ]
    },
    "Scheduled Script SuiteScript": {
        "prefix": "script.scheduled.script",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " *@NScriptType ScheduledScript",
            " */",
            "define([",
            "    'N/search', ",
            "    'N/record', ",
            "    'N/email', ",
            "    'N/runtime'",
            "], function (",
            "    search,",
            "    record,",
            "    email,",
            "    runtime",
            ") {",
            "",
            "    function execute(context) {",
            "",
            "        var searchId = runtime",
            "            .getCurrentScript()",
            "            .getParameter('custscript_searchid');",
            "        try {",
            "            search",
            "                .load({",
            "                    id: searchId,",
            "                })",
            "                .run()",
            "                .each(function (result) {",
            "                    log.debug({",
            "                        details:",
            "                            'transforming so :' +",
            "                            result.id +",
            "                            ' to item fulfillment',",
            "                    });",
            "                    return true;",
            "                });",
            "",
            "        } catch (e) {",
            "            log.error('Error', e)",
            "        }",
            "",
            "    }",
            "",
            "    return {",
            "        execute: execute,",
            "    };",
            "});"
        ]
    },
    "Workflow Action Script": {
        "prefix": "script.workflow.action",
        "body": [
            "/**",
            " * @NApiVersion 2.0",
            " * @NScriptType WorkflowActionScript",
            " */",
            "define([], function () {",
            "",
            "    function onAction(scriptContext) {",
            "",
            "        log.debug({",
            "            title: 'Start Script',",
            "        });",
            "",
            "        return 1;",
            "    }",
            "    ",
            "    return {",
            "        onAction: onAction,",
            "    };",
            "});"
        ]
    }
}
